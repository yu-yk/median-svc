// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: median.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Median_PushNumber_FullMethodName = "/median.median/PushNumber"
	Median_GetMedian_FullMethodName  = "/median.median/GetMedian"
)

// MedianClient is the client API for Median service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MedianClient interface {
	PushNumber(ctx context.Context, in *PushNumberRequest, opts ...grpc.CallOption) (*PushNumberResponse, error)
	GetMedian(ctx context.Context, in *GetMedianRequest, opts ...grpc.CallOption) (*GetMedianResponse, error)
}

type medianClient struct {
	cc grpc.ClientConnInterface
}

func NewMedianClient(cc grpc.ClientConnInterface) MedianClient {
	return &medianClient{cc}
}

func (c *medianClient) PushNumber(ctx context.Context, in *PushNumberRequest, opts ...grpc.CallOption) (*PushNumberResponse, error) {
	out := new(PushNumberResponse)
	err := c.cc.Invoke(ctx, Median_PushNumber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medianClient) GetMedian(ctx context.Context, in *GetMedianRequest, opts ...grpc.CallOption) (*GetMedianResponse, error) {
	out := new(GetMedianResponse)
	err := c.cc.Invoke(ctx, Median_GetMedian_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MedianServer is the server API for Median service.
// All implementations must embed UnimplementedMedianServer
// for forward compatibility
type MedianServer interface {
	PushNumber(context.Context, *PushNumberRequest) (*PushNumberResponse, error)
	GetMedian(context.Context, *GetMedianRequest) (*GetMedianResponse, error)
	mustEmbedUnimplementedMedianServer()
}

// UnimplementedMedianServer must be embedded to have forward compatible implementations.
type UnimplementedMedianServer struct {
}

func (UnimplementedMedianServer) PushNumber(context.Context, *PushNumberRequest) (*PushNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushNumber not implemented")
}
func (UnimplementedMedianServer) GetMedian(context.Context, *GetMedianRequest) (*GetMedianResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMedian not implemented")
}
func (UnimplementedMedianServer) mustEmbedUnimplementedMedianServer() {}

// UnsafeMedianServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MedianServer will
// result in compilation errors.
type UnsafeMedianServer interface {
	mustEmbedUnimplementedMedianServer()
}

func RegisterMedianServer(s grpc.ServiceRegistrar, srv MedianServer) {
	s.RegisterService(&Median_ServiceDesc, srv)
}

func _Median_PushNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedianServer).PushNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Median_PushNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedianServer).PushNumber(ctx, req.(*PushNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Median_GetMedian_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMedianRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedianServer).GetMedian(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Median_GetMedian_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedianServer).GetMedian(ctx, req.(*GetMedianRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Median_ServiceDesc is the grpc.ServiceDesc for Median service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Median_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "median.median",
	HandlerType: (*MedianServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushNumber",
			Handler:    _Median_PushNumber_Handler,
		},
		{
			MethodName: "GetMedian",
			Handler:    _Median_GetMedian_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "median.proto",
}
