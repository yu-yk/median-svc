// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: median.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PushNumberRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PushNumberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushNumberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PushNumberRequestMultiError, or nil if none found.
func (m *PushNumberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PushNumberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetNumber(); val < -100 || val > 100 {
		err := PushNumberRequestValidationError{
			field:  "Number",
			reason: "value must be inside range [-100, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PushNumberRequestMultiError(errors)
	}

	return nil
}

// PushNumberRequestMultiError is an error wrapping multiple validation errors
// returned by PushNumberRequest.ValidateAll() if the designated constraints
// aren't met.
type PushNumberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushNumberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushNumberRequestMultiError) AllErrors() []error { return m }

// PushNumberRequestValidationError is the validation error returned by
// PushNumberRequest.Validate if the designated constraints aren't met.
type PushNumberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushNumberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushNumberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushNumberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushNumberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushNumberRequestValidationError) ErrorName() string {
	return "PushNumberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PushNumberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushNumberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushNumberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushNumberRequestValidationError{}

// Validate checks the field values on PushNumberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PushNumberResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushNumberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PushNumberResponseMultiError, or nil if none found.
func (m *PushNumberResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PushNumberResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PushNumberResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PushNumberResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PushNumberResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PushNumberResponseMultiError(errors)
	}

	return nil
}

// PushNumberResponseMultiError is an error wrapping multiple validation errors
// returned by PushNumberResponse.ValidateAll() if the designated constraints
// aren't met.
type PushNumberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushNumberResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushNumberResponseMultiError) AllErrors() []error { return m }

// PushNumberResponseValidationError is the validation error returned by
// PushNumberResponse.Validate if the designated constraints aren't met.
type PushNumberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushNumberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushNumberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushNumberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushNumberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushNumberResponseValidationError) ErrorName() string {
	return "PushNumberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PushNumberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushNumberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushNumberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushNumberResponseValidationError{}

// Validate checks the field values on GetMedianRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetMedianRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMedianRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMedianRequestMultiError, or nil if none found.
func (m *GetMedianRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMedianRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetMedianRequestMultiError(errors)
	}

	return nil
}

// GetMedianRequestMultiError is an error wrapping multiple validation errors
// returned by GetMedianRequest.ValidateAll() if the designated constraints
// aren't met.
type GetMedianRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMedianRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMedianRequestMultiError) AllErrors() []error { return m }

// GetMedianRequestValidationError is the validation error returned by
// GetMedianRequest.Validate if the designated constraints aren't met.
type GetMedianRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMedianRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMedianRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMedianRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMedianRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMedianRequestValidationError) ErrorName() string { return "GetMedianRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetMedianRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMedianRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMedianRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMedianRequestValidationError{}

// Validate checks the field values on GetMedianResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetMedianResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMedianResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMedianResponseMultiError, or nil if none found.
func (m *GetMedianResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMedianResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMedianResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMedianResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMedianResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetMedianResponseMultiError(errors)
	}

	return nil
}

// GetMedianResponseMultiError is an error wrapping multiple validation errors
// returned by GetMedianResponse.ValidateAll() if the designated constraints
// aren't met.
type GetMedianResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMedianResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMedianResponseMultiError) AllErrors() []error { return m }

// GetMedianResponseValidationError is the validation error returned by
// GetMedianResponse.Validate if the designated constraints aren't met.
type GetMedianResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMedianResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMedianResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMedianResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMedianResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMedianResponseValidationError) ErrorName() string {
	return "GetMedianResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMedianResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMedianResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMedianResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMedianResponseValidationError{}

// Validate checks the field values on Status with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Status) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Status with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in StatusMultiError, or nil if none found.
func (m *Status) ValidateAll() error {
	return m.validate(true)
}

func (m *Status) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Median

	// no validation rules for Size

	if all {
		switch v := interface{}(m.GetLastUpdated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatusValidationError{
					field:  "LastUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatusValidationError{
					field:  "LastUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatusValidationError{
				field:  "LastUpdated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StatusMultiError(errors)
	}

	return nil
}

// StatusMultiError is an error wrapping multiple validation errors returned by
// Status.ValidateAll() if the designated constraints aren't met.
type StatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatusMultiError) AllErrors() []error { return m }

// StatusValidationError is the validation error returned by Status.Validate if
// the designated constraints aren't met.
type StatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatusValidationError) ErrorName() string { return "StatusValidationError" }

// Error satisfies the builtin error interface
func (e StatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatusValidationError{}
